{"version":3,"sources":["components/App/App.jsx","index.tsx"],"names":["fetchParts","window","fetch","process","method","headers","body","JSON","stringify","operationName","query","variables","then","response","json","getRandomIntInclusive","min","max","Math","ceil","floor","random","App","useState","indexes","setIndexes","useQuery","status","data","error","heads_m","bodies_m","legs_m","shuffle","remainingHeads","map","h","index","filter","headIndex","remainingBodies","b","bodyIndex","remainingLegs","l","legsIndex","console","log","length","head","legs","className","onClick","src","image","publicUrl","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA4BMA,G,MAAa,WACjB,OAAOC,OAAOC,MAxBQC,gDAwBe,CACnCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBC,cAAe,KACfC,MA7BK,uVA8BLC,UAAW,OAGdC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YAS7B,SAASC,EAAsBC,EAAKC,GAGlC,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,EAGhD,IAAMM,EAAM,WAAO,IAAD,EACOC,mBAAS,MADhB,mBAChBC,EADgB,KACPC,EADO,OAGSC,YAAS,QAAS1B,GAA1C2B,EAHe,EAGfA,OAAQC,EAHO,EAGPA,KAHO,EAGDC,MAEtB,OAAQF,GACN,IAAK,UAAY,IAAD,EACkCC,EAAxCA,KAAQE,EADF,EACEA,QAASC,EADX,EACWA,SAAUC,EADrB,EACqBA,OAEnC,GAAgB,OAAZR,EAAkB,CAEpB,IAAMS,EAAU,WACd,IAAMC,EAAiBJ,EACpBK,KAAI,SAACC,EAAGC,GAAJ,OAAcA,KAClBC,QAAO,SAAAC,GAAS,OAAIA,IAAcf,EAAQ,MAEvCgB,EAAkBT,EACrBI,KAAI,SAACM,EAAGJ,GAAJ,OAAcA,KAClBC,QAAO,SAAAI,GAAS,OAAIA,IAAclB,EAAQ,MAEvCmB,EAAgBX,EACnBG,KAAI,SAACS,EAAGP,GAAJ,OAAcA,KAClBC,QAAO,SAAAO,GAAS,OAAIA,IAAcrB,EAAQ,MAE7CsB,QAAQC,IAAI,CACVb,iBACAM,oBAGFf,EAAW,CACTS,EAAenB,EAAsB,EAAGmB,EAAec,OAAS,IAChER,EAAgBzB,EAAsB,EAAGyB,EAAgBQ,OAAS,IAClEL,EAAc5B,EAAsB,EAAG4B,EAAcK,OAAS,OAI5DC,EAAOnB,EAAQN,EAAQ,IACvBlB,EAAOyB,EAASP,EAAQ,IACxB0B,EAAOlB,EAAOR,EAAQ,IAE5B,OAAO,yBAAK2B,UAAU,OACpB,yBACEA,UAAU,UACVC,QAASnB,GACRgB,GAAQ,6BACP,yBAAKI,IAAKJ,EAAKK,MAAMC,aAEtBjD,GAAQ,6BACP,yBAAK+C,IAAK/C,EAAKgD,MAAMC,aAEtBL,GAAQ,6BACP,yBAAKG,IAAKH,EAAKI,MAAMC,cAIzB,4BAAQH,QAASnB,GAAjB,gBAGFR,EAAW,CACTV,EAAsB,EAAGe,EAAQkB,OAAS,GAC1CjC,EAAsB,EAAGgB,EAASiB,OAAS,GAC3CjC,EAAsB,EAAGiB,EAAOgB,OAAS,KAI/C,QACE,OAAO,yBAAKG,UAAU,OACpB,4BAAQA,UAAU,cAAlB,iBCrHRK,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1b44d7c7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { useQuery } from 'react-query'\n\nimport './App.css'\n\nconst GRAPHQL_API_URL = process.env.REACT_APP_GRAPHQL_API_URL\n\nconst query = `query {\n  heads_m: allMonsterParts (where: { type: head_m }) {\n    name,\n    image {\n      publicUrl\n    }\n  },\n  bodies_m: allMonsterParts (where: { type: body_m }) {\n    name,\n    image {\n      publicUrl\n    }\n  },\n  legs_m: allMonsterParts (where: { type: legs_m }) {\n    name,\n    image {\n      publicUrl\n    }\n  },\n}`\n\nconst fetchParts = () => {\n  return window.fetch(GRAPHQL_API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      operationName: null,\n      query,\n      variables: {}\n    })\n  })\n  .then(response => response.json())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\n\nfunction getRandomIntInclusive(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive\n}\n\nexport const App = () => {\n  const [indexes, setIndexes] = useState(null)\n\n  const { status, data, error } = useQuery('parts', fetchParts)\n\n  switch (status) {\n    case 'success': {\n      const { data: { heads_m, bodies_m, legs_m } } = data\n\n      if (indexes !== null) {\n\n        const shuffle = () => {\n          const remainingHeads = heads_m\n            .map((h, index) => index)\n            .filter(headIndex => headIndex !== indexes[0])\n\n          const remainingBodies = bodies_m\n            .map((b, index) => index)\n            .filter(bodyIndex => bodyIndex !== indexes[1])\n\n          const remainingLegs = legs_m\n            .map((l, index) => index)\n            .filter(legsIndex => legsIndex !== indexes[2])\n\n          console.log({\n            remainingHeads,\n            remainingBodies\n          })\n\n          setIndexes([\n            remainingHeads[getRandomIntInclusive(0, remainingHeads.length - 1)],\n            remainingBodies[getRandomIntInclusive(0, remainingBodies.length - 1)],\n            remainingLegs[getRandomIntInclusive(0, remainingLegs.length - 1)]\n          ])\n        }\n\n        const head = heads_m[indexes[0]]\n        const body = bodies_m[indexes[1]]\n        const legs = legs_m[indexes[2]]\n\n        return <div className='App'>\n          <div\n            className='Monster'\n            onClick={shuffle}>\n            {head && <div>\n              <img src={head.image.publicUrl} />\n            </div>}\n            {body && <div>\n              <img src={body.image.publicUrl} />\n            </div>}\n            {legs && <div>\n              <img src={legs.image.publicUrl} />\n            </div>}\n          </div>\n\n          <button onClick={shuffle}>Embaralhar!</button>\n        </div>\n      } else {\n        setIndexes([\n          getRandomIntInclusive(0, heads_m.length - 1),\n          getRandomIntInclusive(0, bodies_m.length - 1),\n          getRandomIntInclusive(0, legs_m.length - 1)\n        ])\n      }\n    }\n    default: {\n      return <div className='App'>\n        <header className='App-header'>\n          Carregando\n        </header>\n      </div>\n    }\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './components/App/App.jsx'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}